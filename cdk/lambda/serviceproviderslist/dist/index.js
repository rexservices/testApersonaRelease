"use strict";var f=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var U=Object.getOwnPropertyNames;var C=Object.prototype.hasOwnProperty;var S=(s,t)=>{for(var i in t)f(s,i,{get:t[i],enumerable:!0})},A=(s,t,i,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of U(t))!C.call(s,o)&&o!==i&&f(s,o,{get:()=>t[o],enumerable:!(n=P(t,o))||n.enumerable});return s};var O=s=>A(f({},"__esModule",{value:!0}),s);var L={};S(L,{handler:()=>R});module.exports=O(L);var p=require("@aws-sdk/client-cognito-identity-provider"),m=require("@aws-sdk/client-dynamodb"),I=new m.DynamoDBClient({region:process.env.AWS_REGION}),N=new p.CognitoIdentityProviderClient({region:process.env.AWS_REGION}),w=process.env.SAMLPROXY_API_URL,E=60,T=async(s,t)=>{let i=[];try{let o=await fetch(w,{method:"GET",cache:"no-cache",headers:{"Content-Type":"application/json",Authorization:t}});console.log("fetch samlurl res",o);let r=await o.json();console.log("fetch samlurl resData",r);for(var n in r){console.log("samlslist getting item with id from ddb",r[n].id);let c={TableName:process.env.AMFA_SPINFO_TABLE,Key:{id:{S:`#SAML#${r[n].id}`}}},d=null;try{let a=await s.send(new m.GetItemCommand(c));console.log("samlslist get spInfo from dynamodb Res",a),a?.Item?.id&&(d={logoUrl:a?.Item?.logoUrl?.S,serviceUrl:a?.Item?.serviceUrl?.S,released:!!a?.Item?.released?.BOOL})}catch(a){console.log("samlslist get spInfo from dynamodb error",a)}i.push({id:r[n].id,name:r[n].name,entityId:r[n].entityId,logoUrl:d?.logoUrl,serviceUrl:d?.serviceUrl,released:d?.released})}}catch(o){console.error("samlslist fetch samlurl error",o)}return i},b=async(s,t)=>{let i={TableName:process.env.AMFA_SPINFO_TABLE,Key:{id:{S:`#OIDC#${t}`}}},n=null,o=[];try{let r=await s.send(new m.GetItemCommand(i));console.log("get spInfo from dynamodb Res",r),r?.Item?.id&&(n={logoUrl:r?.Item?.logoUrl?.S,serviceUrl:r?.Item?.serviceUrl?.S,released:r?.Item?.released?.BOOL})}catch(r){console.log("appclient get spInfo from dynamodb error",r)}if(n?.serviceUrl){try{o=JSON.parse(n.serviceUrl)}catch(r){console.log("appclient oidc spInfo serviceUrl json parse error",r)}delete n.serviceUrl,n.serviceProviders=o.filter(r=>r.released)}return n},R=async s=>{console.info(`EVENT
`+JSON.stringify(s,null,2));let t={type:"exception",message:"Service Error"},i=s.headers.authorization;try{let o={Limit:E,...s.body&&{NextToken:s.body},UserPoolId:process.env.USERPOOL_ID};console.info("params",o);let r=await N.send(new p.ListUserPoolClientsCommand(o)),c=[];if(r?.UserPoolClients&&r.UserPoolClients.length>0){let e=r.UserPoolClients.filter(l=>l.ClientName!=="hostedUIClient"&&l.ClientName!=="customAuthClient"&&l.ClientName!=="samlproxyClient"&&!l.ClientName.startsWith("amfasys_"));for(let l of e){let g=await b(I,l.ClientId);g&&g.serviceProviders.length>0&&c.push({id:l.ClientId,name:l.ClientName,logoUrl:g.logoUrl,serviceProviders:g.serviceProviders,type:"oidc"})}}(await T(I,i)).forEach(e=>{e.released&&c.push({id:e.id,name:e.name,logoUrl:e.logoUrl,serviceUrl:e.serviceUrl,released:e.released,type:"saml"})});let a=c.map(e=>(e.serviceProviders?.length===1&&(e.id=e.id+"#"+e.serviceProviders[0].spname.replace(/\s/g,""),e.name=e.serviceProviders[0].spname,e.released=e.serviceProviders[0].released,e.logoUrl=e.serviceProviders[0].splogourl?.length?e.serviceProviders[0].splogourl:e.logoUrl,e.serviceUrl=e.serviceProviders[0].sploginurl,delete e.serviceProviders),e)),y=parseInt(s.queryStringParameters.page),h=parseInt(s.queryStringParameters.perPage),v=(y-1)*h,u=a.length+v-1;return a.sort((e,l)=>e.id<l.id?-1:e.id>l.id?1:0),{statusCode:200,headers:{"Access-Control-Allow-Headers":"Content-Type,Authorization,X-Api-Key,Content-Range,X-Requested-With","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"OPTIONS,GET,POST","Access-Control-Expose-Headers":"Content-Range","Content-Range":`serviceproviders ${v}-${u}`},body:JSON.stringify({data:a,total:a.length})}}catch(o){switch(console.log("Catch an error: ",o),o.name){case"ThrottlingException":t={type:"exception",message:"Too many requests"};break;case"InvalidParameterValue":case"InvalidParameterException":t={type:"exception",message:"Invalid parameter"};break;default:t={type:"exception",message:"Service Error"};break}}return{statusCode:500,body:JSON.stringify(t)}};0&&(module.exports={handler});
//# sourceMappingURL=index.js.map
